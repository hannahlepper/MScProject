#    TB_prev = (I+N)/Total                  # Prevalence
#    Inf_prev = Ls + Lf + I + N + C         # Prevalence of infection
#    TB_Deaths = Mui*I + Mun*N              # Deaths
#    ARI = b*I*100                          # ARI
list(
c(
dU,
dLs,
dLf,
dI,
dN,
dC
),
Total = P
#      Inc = Inc/Total,
#      Inc_first = Inc_first,
#      Inc_react = Inc_react,
#      Inc_reinf = Inc_reinf,
#      Inc_relap = Inc_relap,
#      Prev = TB_prev,
#      Inf_prev = Inf_prev/Total,
#      Mort = TB_Deaths/Total,
#      ARI = ARI
)
})
}
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base
PSmodel <- function (t, x,pars) {
with(as.list(c(x,pars)),{
del <- approxfun(x=c(1014,1015),y=c(CDR, (CDR + ((1-CDR)*cov*sens))),method="linear",rule=2)
k <- approxfun(x=c(1014,1015),y=c(k_base,k_int),method="linear",rule=2)
births <- Mu*(U + Ls + Lf + I + N + C) + Mui*I + Mun*N
P <- U + Ls + Lf + I + N + C
#Betas
bw <- (1-r) * b
bc <- r * b
#FOIs
foi_basic <- bw * U * (I + (c*N))
foi_comm <- bc * U *Ic
foi_exo_react <- bw * a * x * (I + (c*N)) * Ls
foi_exo_react_comm <- bc * a * x * Ic * Ls
foi_reinf <- bw * a * x * (I + (c*N)) * C
foi_reinf_comm <- bc * a * x * Ic * C
# Derivatives
dU <- births - foi_basic - foi_comm - Mu*U
dLs <- ((1-a)*(foi_basic + foi_comm)) - foi_exo_react - foi_exo_react_comm - (vs + Mu)*Ls
dLf <- (a * (foi_basic + foi_comm)) - (vf + Mu)*Lf
dI <- sg*(vs*Ls + vf*Lf + foi_exo_react + foi_exo_react_comm
+ foi_reinf + foi_reinf_comm + p*C) + theta*N - (del(t)*k(t)*tau + Mu + Mui + nc)*I
dN <- (1-sg)*(vs*Ls + vf*Lf + foi_exo_react + foi_exo_react_comm
+ foi_reinf + foi_reinf_comm + p*C) - (theta + del(t)*k(t)*tau + Mu + Mun + nc)*N
dC <- (nc + del(t)*k(t)*tau)*(I + N) - foi_reinf - foi_reinf_comm - (p + Mu)*C
# Derived outputs
#    Inc = vs*Ls + vf*Lf + a*x*b*I*(Ls+Lf) + p*C # Incidence
#    Inc_first = vf*Lf
#    Inc_react = vs*Ls
#    Inc_reinf = a*x*b*I*(Ls+Lf)
#    Inc_relap = p*C
#    TB_prev = (I+N)/Total                  # Prevalence
#    Inf_prev = Ls + Lf + I + N + C         # Prevalence of infection
#    TB_Deaths = Mui*I + Mun*N              # Deaths
#    ARI = b*I*100                          # ARI
list(
c(
dU,
dLs,
dLf,
dI,
dN,
dC
),
Total = P
#      Inc = Inc/Total,
#      Inc_first = Inc_first,
#      Inc_react = Inc_react,
#      Inc_reinf = Inc_reinf,
#      Inc_relap = Inc_relap,
#      Prev = TB_prev,
#      Inf_prev = Inf_prev/Total,
#      Mort = TB_Deaths/Total,
#      ARI = ARI
)
})
}
plot(as.data.frame(sol_base))
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I)
plot(sol_base_df$time, sol_base_df$I)
.02*1014
1/0.02
CDR_int <- function(CDR, cov, sens) {CDR + ((1-CDR)*cov*sens)}
a
vs
rep(c(survey_interval, no_surveys), 3)
survey_interval <- 2   #2 years
no_surveys <- 3
rep(c(survey_interval, no_surveys), 3)
rep(c(survey_interval +1, no_surveys), 3)
cumsum(rep(c(survey_interval +1, no_surveys), 3))
t_sur_interval <- survey_interval * 50
eq_time <- 1000
cumsum(eq_time, rep(t_sur_interval,no_surveys-1))
cumsum(c(eq_time, rep(t_sur_interval,no_surveys-1)))
cumsum(c(eq_time, rep(c(t_sur_interval,1, 1),no_surveys-1)))
survey_times <- cumsum(c(eq_time, 1, 1, rep(c(t_sur_interval,1, 1),no_surveys-1)))
survey_times
survey_times <- function(survey_interval) {
cumsum(c(1000, 1, 1, rep(c(survey_interval*50, 1, 1), 2)))
}
survey_times(2)
survey_times(3)
survey_times(5)
survey_times(2.5)
PSmodel <- function (t, x,pars) {
with(as.list(c(x,pars)),{
del <- approxfun(x=survey_times(survey_interval),y=rep(c(CDR, CDR_survey, CDR),3),method="linear",rule=2)
k <- approxfun(x=c(1014,1015),y=c(k_base,k_int),method="linear",rule=2)
births <- Mu*(U + Ls + Lf + I + N + C) + Mui*I + Mun*N
P <- U + Ls + Lf + I + N + C
#Betas
bw <- (1-r) * b
bc <- r * b
#FOIs
foi_basic <- bw * U * (I + (c*N))
foi_comm <- bc * U *Ic
foi_exo_react <- bw * a * x * (I + (c*N)) * Ls
foi_exo_react_comm <- bc * a * x * Ic * Ls
foi_reinf <- bw * a * x * (I + (c*N)) * C
foi_reinf_comm <- bc * a * x * Ic * C
# Derivatives
dU <- births - foi_basic - foi_comm - Mu*U
dLs <- ((1-a)*(foi_basic + foi_comm)) - foi_exo_react - foi_exo_react_comm - (vs + Mu)*Ls
dLf <- (a * (foi_basic + foi_comm)) - (vf + Mu)*Lf
dI <- sg*(vs*Ls + vf*Lf + foi_exo_react + foi_exo_react_comm
+ foi_reinf + foi_reinf_comm + p*C) + theta*N - (del(t)*k(t)*tau + Mu + Mui + nc)*I
dN <- (1-sg)*(vs*Ls + vf*Lf + foi_exo_react + foi_exo_react_comm
+ foi_reinf + foi_reinf_comm + p*C) - (theta + del(t)*k(t)*tau + Mu + Mun + nc)*N
dC <- (nc + del(t)*k(t)*tau)*(I + N) - foi_reinf - foi_reinf_comm - (p + Mu)*C
# Derived outputs
#    Inc = vs*Ls + vf*Lf + a*x*b*I*(Ls+Lf) + p*C # Incidence
#    Inc_first = vf*Lf
#    Inc_react = vs*Ls
#    Inc_reinf = a*x*b*I*(Ls+Lf)
#    Inc_relap = p*C
#    TB_prev = (I+N)/Total                  # Prevalence
#    Inf_prev = Ls + Lf + I + N + C         # Prevalence of infection
#    TB_Deaths = Mui*I + Mun*N              # Deaths
#    ARI = b*I*100                          # ARI
list(
c(
dU,
dLs,
dLf,
dI,
dN,
dC
),
Total = P
#      Inc = Inc/Total,
#      Inc_first = Inc_first,
#      Inc_react = Inc_react,
#      Inc_reinf = Inc_reinf,
#      Inc_relap = Inc_relap,
#      Prev = TB_prev,
#      Inf_prev = Inf_prev/Total,
#      Mort = TB_Deaths/Total,
#      ARI = ARI
)
})
}
pars_base <- c(b=b,Mu=0.02,Mui=0.3,Mun=0.03,nc=0.15,p=p,a=a,vf=0.67,vs=vs,sg=0.5,x=0.35,
CDR=0.33,CDR_survey = CDR_int(CDR, cov, sens),tau=0.8,k_base=0.6,k_int=0.7, theta=0.01,r=0.37, c=0.2, Ic = 0.4)
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I)
plot(sol_base_df$time, sol_base_df$I, type = "l")
PSmodel <- function (t, x,pars) {
with(as.list(c(x,pars)),{
del <- approxfun(x=survey_times(survey_interval),y=rep(c(CDR, CDR_survey, CDR),3),method="linear",rule=2)
k <- approxfun(x=survey_times(survey_interval),y=rep(c(k_base,k_int, k_base),3),method="linear",rule=2)
births <- Mu*(U + Ls + Lf + I + N + C) + Mui*I + Mun*N
P <- U + Ls + Lf + I + N + C
#Betas
bw <- (1-r) * b
bc <- r * b
#FOIs
foi_basic <- bw * U * (I + (c*N))
foi_comm <- bc * U *Ic
foi_exo_react <- bw * a * x * (I + (c*N)) * Ls
foi_exo_react_comm <- bc * a * x * Ic * Ls
foi_reinf <- bw * a * x * (I + (c*N)) * C
foi_reinf_comm <- bc * a * x * Ic * C
# Derivatives
dU <- births - foi_basic - foi_comm - Mu*U
dLs <- ((1-a)*(foi_basic + foi_comm)) - foi_exo_react - foi_exo_react_comm - (vs + Mu)*Ls
dLf <- (a * (foi_basic + foi_comm)) - (vf + Mu)*Lf
dI <- sg*(vs*Ls + vf*Lf + foi_exo_react + foi_exo_react_comm
+ foi_reinf + foi_reinf_comm + p*C) + theta*N - (del(t)*k(t)*tau + Mu + Mui + nc)*I
dN <- (1-sg)*(vs*Ls + vf*Lf + foi_exo_react + foi_exo_react_comm
+ foi_reinf + foi_reinf_comm + p*C) - (theta + del(t)*k(t)*tau + Mu + Mun + nc)*N
dC <- (nc + del(t)*k(t)*tau)*(I + N) - foi_reinf - foi_reinf_comm - (p + Mu)*C
# Derived outputs
#    Inc = vs*Ls + vf*Lf + a*x*b*I*(Ls+Lf) + p*C # Incidence
#    Inc_first = vf*Lf
#    Inc_react = vs*Ls
#    Inc_reinf = a*x*b*I*(Ls+Lf)
#    Inc_relap = p*C
#    TB_prev = (I+N)/Total                  # Prevalence
#    Inf_prev = Ls + Lf + I + N + C         # Prevalence of infection
#    TB_Deaths = Mui*I + Mun*N              # Deaths
#    ARI = b*I*100                          # ARI
list(
c(
dU,
dLs,
dLf,
dI,
dN,
dC
),
Total = P
#      Inc = Inc/Total,
#      Inc_first = Inc_first,
#      Inc_react = Inc_react,
#      Inc_reinf = Inc_reinf,
#      Inc_relap = Inc_relap,
#      Prev = TB_prev,
#      Inf_prev = Inf_prev/Total,
#      Mort = TB_Deaths/Total,
#      ARI = ARI
)
})
}
pars_base <- c(b=b,Mu=0.02,Mui=0.3,Mun=0.03,nc=0.15,p=p,a=a,vf=0.67,vs=vs,sg=0.5,x=0.35,
CDR=0.33,CDR_survey = CDR_int(CDR, cov, sens),tau=0.8,k_base=0.6,k_int=0.7,
theta=0.01,r=0.37, c=0.2, Ic = 0.4, survey_interval=5)
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I, type = "l")
pars_base <- c(b=b,Mu=0.02,Mui=0.3,Mun=0.03,nc=0.15,p=p,a=a,vf=0.67,vs=vs,sg=0.5,x=0.35,
CDR=0.33,CDR_survey = CDR_int(CDR, cov, sens),tau=0.8,k_base=0.6,k_int=0.7,
theta=0.01,r=0.37, c=0.2, Ic = 0.4, survey_interval=1)
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I, type = "l")
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = 1500)
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(500,1500))
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(800,1300))
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200))
pars_base <- c(b=b,Mu=0.02,Mui=0.3,Mun=0.03,nc=0.15,p=p,a=a,vf=0.67,vs=vs,sg=0.5,x=0.35,
CDR=0.33,CDR_survey = CDR_int(CDR, cov, sens),tau=0.8,k_base=0.6,k_int=0.7,
theta=0.01,r=0.37, c=0.2, Ic = 0.1, survey_interval=1)
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200))
sol_base_df[c(950:1150),]
CDR <- 0.5
cov <- 0.4
sens <- 0.9
pars_base <- c(b=b,Mu=0.02,Mui=0.3,Mun=0.03,nc=0.15,p=p,a=a,vf=0.67,vs=vs,sg=0.5,x=0.35,
CDR=0.33,CDR_survey = CDR_int(CDR, cov, sens),tau=0.8,k_base=0.6,k_int=0.7,
theta=0.01,r=0.37, c=0.2, Ic = 0.1, survey_interval=1)
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200))
sol_base_df[c(110:1150),]
sol_base_df[c(1100:1150),]
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200), ylim = c(0.025,0.045))
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200), ylim = c(0.025,0.04))
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200), ylim = c(0.03,0.035))
plot(sol_base_df$time, sol_base_df$Lf, type = "l", xlim = c(900,1200))
plot(sol_base_df$time, sol_base_df$C, type = "l", xlim = c(900,1200))
p
a
b = 22
pars_base <- c(b=b,Mu=0.02,Mui=0.3,Mun=0.03,nc=0.15,p=p,a=a,vf=0.67,vs=vs,sg=0.5,x=0.35,
CDR=0.33,CDR_survey = CDR_int(CDR, cov, sens),tau=0.8,k_base=0.6,k_int=0.7,
theta=0.01,r=0.37, c=0.2, Ic = 0.1, survey_interval=1)
sol_base <-ode(y=yinit,times=seq(0,2000),func=PSmodel,parms=pars_base)
sol_base_df <- as.data.frame(sol_base)
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200), ylim = c(0.03,0.035))
plot(sol_base_df$time, sol_base_df$C, type = "l", xlim = c(900,1200))
plot(sol_base_df$time, sol_base_df$I, type = "l", xlim = c(900,1200))
library(deSolve)
library(rootSolve)
library(rlist)
library(plyr)
source("PSmodel.R")
setwd("C://Users/hanna/Documents/GitHub/MSc project/")
source("PSmodel.R")
source("PSmodel.R")
source("Parameter_combinations.R")
source("matchclosestMALDIquant.R")
pars <- list(p=0.01, a=0.11, vf=0.67,
vs=0.0005, sg=0.45, x=0.65, nc=0.2,
theta=0.015,  Mui=0.3, Mun=0.21,
CDR=0.7, CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, c=0.22, Ic = 0.002,
survey_interval=5,
r = c(.10, .40, .70),
k = c(.40, .60, .80, 1))
tofit <- parametercombinations(pars)
equilibrium_inc <- function(data) {
min(data[which(data[,"Inc"] == as.numeric(tail(data,1)["Inc"])),"time"])
}
equilibrium_test <- function(data) {
eqlm <- min(data[which(data[,"Inc"] == as.numeric(tail(data,1)["Inc"])),"time"])
if(eqlm == as.numeric(tail(data,1)["time"]) | eqlm == as.numeric(tail(data,1)["Inc"])+1)
{flag <- FALSE}
else {flag <- TRUE}
return(flag)
}
modelrun <- function(parameters, init, changeparam) {
sol <- runsteady(y=init,times=c(0,Inf),func=PSmodel,parms=parameters)
sol_df <- as.data.frame(sol)
as.data.frame(cbind(parameters[changeparam], Inc = tail(sol_df$Inc, 1)))
}
modelrun(pars_base, yinit, "b")
bmodelrun <- function(parameters) {
Init_inf <- 0.2 # Fraction of the pop initially infected
init <- c(U=1-Init_inf,Ls=0.99*Init_inf,Lf=0,I=0.01*Init_inf,N=0,C=0)
modelrun(parameters, init, "b")
}
mumodelrun <- function(parameters) {
Init_inf <- 0.2 # Fraction of the pop initially infected
init <- c(U=1-Init_inf,Ls=0.99*Init_inf,Lf=0,I=0.01*Init_inf,N=0,C=0)
modelrun(parameters, init, "Mu")
}
other_pars_lessb <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mu = 0.06, Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5)
other_pars_lessMu <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5, b = 12.2)
other_pars_lessblessMu <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5)
paramsetgenbeta <- function(fittingpars, otherpars) {
parametercombinations(list.append(otherpars, b = fittingpars))
}
paramsetgenmu <- function(fittingpars, otherpars) {
parametercombinations(list.append(otherpars, Mu = fittingpars))
}
paramsetbeta <- paramsetgenbeta(seq(10,20,1), other_pars_lessb)
paramsetMu <- paramsetgenmu(seq(0.04,0.06,length.out = 10), other_pars_lessMu)
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor("b"), bmodelrun)}
else if (type == "Mu") {ddply(paramset, as.factor("Mu"), mumodelrun)}
}
sets(paramsetbeta, "b")
selectbeta <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenbeta(initfittingpars, other_pars), "b")
rownum <- match.closest(112.34, set[,"Inc"])
b <- set[rownum, "b"]
#2
set <- sets(paramsetgenbeta(seq(b-0.5, b+0.5, 0.1), other_pars), "b")
rownum <- match.closest(112.34, set[,"Inc"])
b <- set[rownum, "b"]
return(c(beta = b, Inc = set[rownum, "Inc"]))
}
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112.34, set[, "Inc"]),]
Mu <- row[, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112.34, set[, "Inc"]),]
Mu <- row[, "Mu"]
return(c(Mu = Mu, Inc = row[, "Inc"]))
}
selectpars <- function(pars) {
b <- selectbeta(8:22, c(pars, Mu = 0.06))
Mu <- selectmu(seq(0.04,0.07,length.out = 10), c(pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
start <- Sys.time()
lowrlowk <- selectpars(other_pars_lessblessMu)
timetaken <- Sys.time() - start
library(readr)
timetaken
start <- Sys.time()
fittedparams <- adply(tofit, 1, selectpars) #runs across all 12
timetaken <- Sys.time() - start
write.csv(fittedparams, "fittedparams.csv")
timetaken
selectpars <- function(pars) {
b <- selectbeta(8:22, c(pars, Mu = 0.06))
Mu <- selectmu(seq(0.04,0.07,length.out = 10), c(pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars <- function(pars) {
b <- selectbeta(3:16, c(pars, Mu = 0.06))
Mu <- selectmu(seq(0.04,0.07,length.out = 10), c(pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars <- function(pars) {
b <- selectbeta(3:16, c(pars, Mu = 0.06))
Mu <- selectmu(seq(0.03,0.08,length.out = 10), c(pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
start <- Sys.time()
fittedparams <- adply(tofit, 1, selectpars) #runs across all 12
timetaken <- Sys.time() - start
#4.9 minutes
write.csv(fittedparams, "C://Users/hanna/Dropbox/Academic/LSHTM/Project/")
fastrun <- function(pars) {
y <- c(U=1-0.2,Ls=0.99*0.2,Lf=0,I=0.01*0.2,N=0,C=0)
initrun<-runsteady(y=y,times=c(0,Inf), func=PSmodel, parms=pars)
yinit<-initrun$y
sol_base<-ode(y=yinit,times=seq(0,500, by=0.02),func=PSmodel,parms=pars)
sol_base_df <- as.data.frame(sol_base)
print(equilibrium_test(sol_base_df))
return(sol_base_df)
}
timetaken
write.csv(fittedparams, "C://Users/hanna/Dropbox/Academic/LSHTM/Project/")
write.csv(fittedparams, "C://Users/hanna/Dropbox/Academic/LSHTM/Project/fittedparms.csv")
fittedmubeta <- read.csv( "C://Users/hanna/Dropbox/Academic/LSHTM/Project/fittedparams.csv",
header = TRUE)
fittedmubeta <- fittedmubeta[, -21]
fittedmubeta <- read.csv( "C://Users/hanna/Dropbox/Academic/LSHTM/Project/fittedparms.csv",
header = TRUE)
fittedmubeta <- fittedmubeta[, -21]
fittedmubeta
length(fittedmubeta)
class(fittedmubeta)
fittedmubeta[,-21]
fittedmubeta <- fittedmubeta[,-21]
fittedmubeta
test <- system.time(fastrun(fittedmubeta[1,]))
fittedmubeta <- read.csv( "C://Users/hanna/Dropbox/Academic/LSHTM/Project/fittedparms.csv",
header = TRUE)
fittedmubeta
length(fittedmubeta)
fittedmubeta <- fittedmubeta[,-c(1,22)]
fittedmubeta
test <- system.time(fastrun(fittedmubeta[1,]))
names(fittedmubeta)
names(fittedmubeta[19])
names(fittedmubeta[19]) <- "b"
names(fittedmubeta[19])
names(fittedmubeta)
colnames(fittedmubeta[19]) <- "b"
colnames(fittedmubeta)
rename(fittedmubeta, "beta" = "b")
rename(fittedmubeta, c("beta" = "b"))
fittedmubeta <- rename(fittedmubeta, c("beta" = "b"))
test <- system.time(fastrun(fittedmubeta[1,]))
fittedmubeta[1,]
(U=1-0.2,Ls=0.99*0.2,Lf=0,I=0.01*0.2,N=0,C=0)
y <- c(U=1-0.2,Ls=0.99*0.2,Lf=0,I=0.01*0.2,N=0,C=0)
initrun<-runsteady(y=y,times=c(0,Inf), func=PSmodel, parms=pars)
as.matrix(fittedmubeta[1,])
class(as.matrix(fittedmubeta[1,]))
as.matrix(fittedmubeta[1,])/50
initrun<-runsteady(y=y,times=c(0,Inf), func=PSmodel, parms=as.matrix(pars[1,]))
initrun<-runsteady(y=y,times=c(0,Inf), func=PSmodel, parms=as.matrix(fittedmubeta[1,]))
pars <- as.matrix(fittedmubeta[1,])
pars["CDR"]
pars
pars["p"]
pars$p
names(pars)
dim(pars)
attach(pars)
attach(as.list(pars))
as.list(pars)
as.list(pars)/50
attach(pars)
initrun<-runsteady(y=y,times=c(0,Inf), func=PSmodel, parms=as.matrix(fittedmubeta[1,]))
initrun<-runsteady(y=y,times=c(0,Inf), func=PSmodel, parms=fittedmubeta[1,])
initrun
test <- system.time(fastrun(fittedmubeta[1,]))
test
test <- fastrun(fittedmubeta[1,])
test
start <- Sys.time()
sol_base <-ode(y=yinit,times=seq(0,500, by=0.02),func=PSmodel,parms=pars_base)
Sys.time()-start
start <- Sys.time()
sol_base <-ode(y=y,times=seq(0,500, by=0.02),func=PSmodel,parms=fittedmubeta[1,])
Sys.time()-start
start <- Sys.time()
sol_base <-ode(y=y,times=seq(0,500, by=0.02),func=PSmodel,parms=fittedmubeta[1,])
Sys.time()-start
start <- Sys.time()
test <- fastrun(fittedmubeta[1,])
Sys.time()-start
