set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
rownum <- match.closest(112, set[,"Inc"])
Mu <- set[rownum, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.1), other_pars), "Mu")
rownum <- match.closest(112, set[,"Inc"])
Mu <- set[rownum, "Mu"]
return(c(Mu = Mu, Inc = set[rownum, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
paramsetgenmu <- function(fittingpars, otherpars) {
cbind(parametercombinations(list.append(otherpars, Mu = fittingpars)),
run = as.factor(1:length(fittingpars)))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
seq(0.04,0.06, 0.002)
seq(0.04,0.06, 0.003)
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
rownum <- match.closest(112, set[,"Inc"])
Mu <- set[rownum, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
rownum <- match.closest(112, set[,"Inc"])
Mu <- set[rownum, "Mu"]
return(c(Mu = Mu, Inc = set[rownum, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
set <- sets(paramsetgenmu(seq(0.04,0.06, 0.002), other_pars), "Mu")
rownum <- match.closest(112, set[,"Inc"])
set
set["Inc"]
paramsetgenmu(seq(0.04,0.06, 0.002), other_pars)
sets <- function(paramset, type){
if (type = "b") {ddply(paramset, as.factor(type), each(betamodelrun))}
if (type = "Mu") {ddply(paramset, as.factor(type), each(mumodelrun))}
}
if (type == "Mu") {ddply(paramset, as.factor(type), each(mumodelrun))}
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor(type), each(betamodelrun))}
if (type == "Mu") {ddply(paramset, as.factor(type), each(mumodelrun))}
}
set <- sets(paramsetgenmu(seq(0.04,0.06, 0.002), other_pars), "Mu")
mumodelrun <- function(parameters) {
Init_inf <- 0.2 # Fraction of the pop initially infected
init <- c(U=1-Init_inf,Ls=0.99*Init_inf,Lf=0,I=0.01*Init_inf,N=0,C=0)
modelrun(parameters, init, "Mu")
}
set <- sets(paramsetgenmu(seq(0.04,0.06, 0.002), other_pars), "Mu")
set
rownum <- match.closest(112, set[,"Inc"])
order(set)
set[,order("Inc")]
set[,order("Mu")]
order(set[,"Inc"])
order(set[,"Inc"], decreasing = False)
order(set[,"Inc"], decreasing = F)
order(set[,"Inc"], decreasing = T)
set[,order(set[,"Inc"], decreasing = T)]
set[,c(order(set[,"Inc"], decreasing = T))]
set[order(set[,"Inc"], decreasing = T), "Inc"]
set[order(set[,"Inc"], decreasing = F), "Inc"]
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
rownum <- match.closest(112, set[order(set[,"Inc"], decreasing = F), "Inc"])
Mu <- set[rownum, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
rownum <- match.closest(112, set[order(set[,"Inc"], decreasing = F), "Inc"])
Mu <- set[rownum, "Mu"]
return(c(Mu = Mu, Inc = set[rownum, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
rownum <- match.closest(112, set[order(set[,"Inc"], decreasing = F), "Inc"])
Mu <- set[rownum, "Mu"]
#2
# set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
# rownum <- match.closest(112, set[order(set[,"Inc"], decreasing = F), "Inc"])
# Mu <- set[rownum, "Mu"]
return(c(Mu = Mu, Inc = set[rownum, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
seq(.04-0.005, .04+0.005, 0.001)
set[order(set[,"Inc"], decreasing = F),]
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownum <- match.closest(112, set[, "Inc"])
Mu <- set[rownum, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownum <- match.closest(112, set[, "Inc"])
Mu <- set[rownum, "Mu"]
return(c(Mu = Mu, Inc = set[rownum, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
set <- sets(paramsetgenmu(seq(0.04,0.06, 0.002), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
set
rownum <- match.closest(112, set[,"Inc"])
rownum
match.closest(112, set[,"Inc"])
set <- sets(paramsetgenmu(seq(0.04,0.06, 0.002), other_pars), "Mu")
rownum <- which(set[,"Inc"] == match.closest(112, set[, "Inc"]))
rownum <- which(set[,"Inc"] == match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]))
rownum
which(set[,"Inc"] == match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]))
match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]
)
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
rownum <- which(set[,"Inc"] == match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]))
Mu <- set[rownum, "Mu"]
Mu
rownum <- set[match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]))
Mu <- set[rownum, "Mu"]
rownum <- set[match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"])]
rownum
match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]
)
set
row <- set[match.closest(112, set[order(set[,"Inc"], decreasing = F),"Inc"]),]
row
set <- sets(paramsetgenmu(seq(0.04,0.06, 0.002), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[,"Inc"]),]
row
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- which(set[,"Inc"] == match.closest(112, set[, "Inc"]))
Mu <- set[rownum, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
rownum <- match.closest(112, set[, "Inc"])
Mu <- set[rownum, "Mu"]
return(c(Mu = Mu, Inc = set[rownum, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- which(set[,"Inc"] == match.closest(112, set[, "Inc"]))
Mu <- row[, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- match.closest(112, set[, "Inc"])
Mu <- row[, "Mu"]
return(c(Mu = Mu, Inc = row[, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
row[,"Mu"]
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[, "Inc"])]
Mu <- row[, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[, "Inc"])]
Mu <- row[, "Mu"]
return(c(Mu = Mu, Inc = row[, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[, "Inc"])]
Mu <- as.numeric(row[, "Mu"])
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[, "Inc"])]
Mu <- as.numeric(row[, "Mu"])
return(c(Mu = Mu, Inc = row[, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
Mu
Mu <- row[, "Mu"]
Mu
class(Mu)
seq(Mu-0.005, Mu+0.005, 0.001)
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[, "Inc"]),]
Mu <- row[, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112, set[, "Inc"]),]
Mu <- row[, "Mu"]
return(c(Mu = Mu, Inc = row[, "Inc"]))
}
selectmu(seq(0.04,0.06, 0.002), other_pars)
Mu <- row[, "Mu"]
row
selectbeta <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenbeta(initfittingpars, other_pars), "b")
rownum <- match.closest(112.34, set[,"Inc"])
b <- set[rownum, "b"]
#2
set <- sets(paramsetgenbeta(seq(b-0.5, b+0.5, 0.1), other_pars), "b")
rownum <- match.closest(112.34, set[,"Inc"])
b <- set[rownum, "b"]
return(c(beta = b, Inc = set[rownum, "Inc"]))
}
selectmu <- function(initfittingpars, other_pars){
#1
set <- sets(paramsetgenmu(initfittingpars, other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112.34, set[, "Inc"]),]
Mu <- row[, "Mu"]
#2
set <- sets(paramsetgenmu(seq(Mu-0.005, Mu+0.005, 0.001), other_pars), "Mu")
set <- set[order(set[,"Inc"], decreasing = F),]
rownames(set) <- NULL
row <- set[match.closest(112.34, set[, "Inc"]),]
Mu <- row[, "Mu"]
return(c(Mu = Mu, Inc = row[, "Inc"]))
}
selectbeta(c(10:15), other_pars)
other_pars_lessb <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mu = 0.06, Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5)
selectbeta(c(10:15), other_pars)
selectbeta(c(10:15), other_pars_lessb)
set <- sets(paramsetgenbeta(seq(10, 15, 1), other_pars_lessb), "b")
row <- set[match.closest(112, set[,"Inc"]),]
row
set
paramsetgenbeta(seq(10, 15, 1), other_pars_lessb)
paramset <- paramsetgenbeta(seq(10, 15, 1), other_pars_lessb)
sets(parmaset, "b")
sets(paramset, "b")
betamodelrun(paramset)
length(paramset)
paramsetgenbeta <- function(fittingpars, otherpars) {
parametercombinations(list.append(otherpars, b = fittingpars))
}
paramsetgenmu <- function(fittingpars, otherpars) {
parametercombinations(list.append(otherpars, Mu = fittingpars))
}
other_pars_lessb <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mu = 0.06, Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5)
paramsetbeta <- paramsetgenbeta(seq(10,20,1), other_pars_lessb)
other_pars_lessMu <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5, b = 12.2)
paramsetMu <- paramsetgenbeta(seq(0.04,0.06,length.out = 10), other_pars_lessMu)
paramsetbeta
ddply(paramsetbeta, as.factor("b"), each(betamodelrun))
ddply(paramsetMu, as.factor("Mu"), each(mumodelrun))
paramsetMu
paramsetMu <- paramsetgenmu(seq(0.04,0.06,length.out = 10), other_pars_lessMu)
paramsetMu
ddply(paramsetMu, as.factor("Mu"), each(mumodelrun))
selectmu(seq(0.04,0.07, length.out = 10), other_pars_lessMu)
selectbeta(c(10:15), other_pars_lessb)
set <- sets(paramsetgenbeta(seq(10, 15, 1), other_pars_lessb), "b")
set
rm(paramset)
set <- sets(paramsetgenbeta(seq(10, 15, 1), other_pars_lessb), "b")
set
sets(paramsetbeta, "b")
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor("b"), each(betamodelrun))}
if (type == "Mu") {ddply(paramset, as.factor("Mu"), each(mumodelrun))}
}
sets(paramsetbeta, "b")
paramsetbeta[1,]
betamodelrun(paramsetbeta[1,])
ddply(paramsetbeta, as.factor("b"), each(ncol))
ddply(paramsetbeta, as.factor("b"), each(mean))
ddply(paramsetbeta, as.factor("b"), each(betamodelrun()))
ddply(paramsetbeta, as.factor("b"), each(betamodelrun)
)
paramset
ddply(paramsetbeta, as.factor("b"), betamodelrun)
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor("b"), betamodelrun)}
if (type == "Mu") {ddply(paramset, as.factor("Mu"), each(mumodelrun))}
}
sets(paramsetbeta, type = "b")
paramsetbeta
sets(paramsetmu, type = "Mu")
sets(paramsetMu, type = "Mu")
bmodelrun <- function(parameters) {
Init_inf <- 0.2 # Fraction of the pop initially infected
init <- c(U=1-Init_inf,Ls=0.99*Init_inf,Lf=0,I=0.01*Init_inf,N=0,C=0)
modelrun(parameters, init, "b")
}
if (type == "b") {ddply(paramset, as.factor("b"), bmodelrun)}
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor("b"), bmodelrun)}
if (type == "Mu") {ddply(paramset, as.factor("Mu"), each(mumodelrun))}
}
sets(paramsetbeta, type = "b")
length(paramsetbeta)
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor("b"), bmodelrun)}
else if (type == "Mu") {ddply(paramset, as.factor("Mu"), each(mumodelrun))}
}
sets(paramsetbeta, "b")
sets <- function(paramset, type){
if (type == "b") {ddply(paramset, as.factor("b"), bmodelrun)}
else if (type == "Mu") {ddply(paramset, as.factor("Mu"), mumodelrun)}
}
selectbeta(c(10:15), other_pars_lessb)
selectmu(seq(0.04,0.07, length.out = 10), other_pars_lessMu)
selectmu(seq(0.04,0.07, length.out = 10), other_pars_lessMu)[1]
b <- selectbeta(10:15, c(other_pars, Mu = 0.06))
other_pars_lessblessMu <- list(p=0.01, a=0.11, vf=0.67, vs=0.0005,
sg=0.45, x=0.65, nc=0.2, theta=0.015,
Mui=0.3, Mun=0.21, CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, k = .4, r=0.1,c=0.22, Ic = 0.002,
survey_interval=5)
c(other_pars_lessblessMu, Mu = 0.06)
b <- selectbeta(10:15, c(other_pars_lessblessMu, Mu = 0.06))
b
Mu <- selectmu(seq(0.04,0.07, length.out = 10), c(other_pars_lessblessMu, b = b[1]))
b[1]
c(other_pars_lessblessMu, b = b[1])
b
c(other_pars_lessblessMu, b = unname(b[1]))
Mu <- selectmu(seq(0.04,0.07, length.out = 10),
c(other_pars_lessblessMu, b = unname(b[1])))
Mu
cbind(b[1], Mu)
cbind(b[1], Mu[1], Mu[2])
cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2])
cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2], row.names(NULL))
as.data.frame(beta = b[1], Mu = Mu[1], Inc = Mu[2], row.names(NULL))
as.data.frame(beta = b[1], Mu = Mu[1], Inc = Mu[2])
as.data.frame(c(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
as.data.frame(c(b[1], Mu[1], Mu[2]))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2], row.names(NULL)))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2], row.names(1))
)
40*15
600/60
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2], row.names=1))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]), row.names=1))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]), row.names(1)))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]), row.names(NULL)))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]), row.names(NULL))
as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]), row.names(1))
selectpars <- function(bpars, Mupars, other_pars, Mubase) {
b <- selectbeta(bpars, c(other_pars, Mu = Mubase))
Mu <- selectmu(Mupars, c(other_pars, b = b[1]))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars(10:15, seq(0.04,0.07, length.out = 10), other_pars_lessblessMu, 0.06)
selectpars <- function(bpars, Mupars, other_pars, Mubase) {
b <- selectbeta(bpars, c(other_pars, Mu = Mubase))
Mu <- selectmu(Mupars, c(other_pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars(10:15, seq(0.04,0.07, length.out = 10), other_pars_lessblessMu, 0.06)
basescenarios <- parametercombinations(list(r = c(.10, .40, .70),
k = c(.40, .60, .80, 1)))
pars_base <- c(p=0.01, a=0.11, vf=0.67,
vs=0.0005, sg=0.45, x=0.65, nc=0.2,
theta=0.015,  Mui=0.3, Mun=0.21,
CDR=0.7, CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, c=0.22, Ic = 0.002,
survey_interval=5)
tofit <- parametercombinations(list.append(basescenarios), pars_base)
tofit <- parametercombinations(list.append(basescenarios, pars_base))
tofit
tofit <- parametercombinations(c(basescenarios, pars_base))
tofit
list.append(pars_base, basescenarios)
pars <- list(p=0.01, a=0.11, vf=0.67,
vs=0.0005, sg=0.45, x=0.65, nc=0.2,
theta=0.015,  Mui=0.3, Mun=0.21,
CDR=0.7, CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91, c=0.22, Ic = 0.002,
survey_interval=5,
r = c(.10, .40, .70),
k = c(.40, .60, .80, 1))
tofit <- parametercombinations(pars)
tofit
adply(pars, 1, nrow)
adply(pars, 1, mean)
adply(pars, 1, print)
dim(pars)
adply(tofit, 1, nrow)
adply(tofit, 1, selectpars(10:20, seq(0.04,0.07, length.out = 10), ., 0.06))
selectpars <- function(pars) {
b <- selectbeta(10:20, c(other_pars, Mu = 0.06))
Mu <- selectmu(seq(0.04,0.07,length.out = 10), c(other_pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars(10:15, seq(0.04,0.07, length.out = 10), other_pars_lessblessMu, 0.06)
selectpars(other_pars_lessblessMu)
selectpars <- function(pars) {
b <- selectbeta(10:20, c(pars, Mu = 0.06))
Mu <- selectmu(seq(0.04,0.07,length.out = 10), c(pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars(other_pars_lessblessMu)
adply(tofit, 1, selectpars)
modelrun <- function(parameters, init, changeparam) {
sol <- ode(y=init,times=seq(0,1000, by=0.02),func=PSmodel,parms=parameters)
sol_df <- as.data.frame(sol)
if (equilibrium_test(sol_df)){
as.data.frame(cbind(parameters[changeparam], Inc = tail(sol_df$Inc, 1)))
} else {print("Eqlm not reached")}
}
selectpars <- function(pars) {
b <- selectbeta(8:22, c(pars, Mu = 0.06))
Mu <- selectmu(seq(0.04,0.07,length.out = 10), c(pars, b = unname(b[1])))
df<- as.data.frame(cbind(beta = b[1], Mu = Mu[1], Inc = Mu[2]))
rownames(df) <-NULL
return(df)
}
selectpars(other_pars_lessblessMu)
system.time()
Sys.time()
start <- Sys.time()
Sys.time() -start
start <- Sys.time()
lowrlowk <- selectpars(other_pars_lessblessMu)
timetaken <- Sys.time() - start
timetaken
sol_base <-ode(y=yinit,times=seq(0,1000, by=0.02),func=PSmodel,parms=pars_base)
pars_base <- c(b=22,
p=0.01,
a=0.11,
vf=0.67,
vs=0.0005,
sg=0.45,
x=0.65,
nc=0.2,
theta=0.015,
Mu=0.06,
Mui=0.3,
Mun=0.21,
CDR=0.7,
CDR_survey=CDR_int(CDR = 0.7, cov = 0, sens = 0),
tau=0.91,
k = 0.79,
r=0.2,
c=0.22,
Ic = 0.002,
survey_interval=5)
sol_base <-ode(y=yinit,times=seq(0,1000, by=0.02),func=PSmodel,parms=pars_base)
system.time(ode(y=yinit,times=seq(0,1000, by=0.02),func=PSmodel,parms=pars_base))
system.time(ode(y=yinit,times=seq(0,1500, by=0.02),func=PSmodel,parms=pars_base))
modelrun <- function(parameters, init, changeparam) {
sol <- ode(y=init,times=seq(0,1, by=0.02),func=PSmodel,parms=parameters)
sol_df <- as.data.frame(sol)
if (equilibrium_test(sol_df)){
as.data.frame(cbind(parameters[changeparam], Inc = tail(sol_df$Inc, 1)))
} else {print("Eqlm not reached")}
}
lowrlowk <- selectpars(other_pars_lessblessMu)
15*52
780/60
(15*52) + (10*52) + (20*52)
2340/60
(15*15) + (10*15) + (20*15)
675/60
